
QUTMS_SteeringWheel_Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004bc  00800100  000007fc  00000890  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001214  008005bc  008005bc  00000d4c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d4c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e0  00000000  00000000  00000dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002773  00000000  00000000  00000f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d33  00000000  00000000  0000370f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ea6  00000000  00000000  00004442  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000057c  00000000  00000000  000052e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000eb5  00000000  00000000  00005864  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000025d0  00000000  00000000  00006719  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  00008ce9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	15 e0       	ldi	r17, 0x05	; 5
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ef       	ldi	r30, 0xFC	; 252
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 3b       	cpi	r26, 0xBC	; 188
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	27 e1       	ldi	r18, 0x17	; 23
  b4:	ac eb       	ldi	r26, 0xBC	; 188
  b6:	b5 e0       	ldi	r27, 0x05	; 5
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 3d       	cpi	r26, 0xD0	; 208
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	3b d0       	rcall	.+118    	; 0x13a <main>
  c4:	99 c3       	rjmp	.+1842   	; 0x7f8 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <adc_init>:
    ADCSRA |= (1 << ADEN)|(1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0);
}

void adc_set_prescalar(uint8_t prescalar) {
    //ADCSRA &= ADC_PRESCALAR_MASK;
    ADCSRA |= prescalar;
  c8:	aa e7       	ldi	r26, 0x7A	; 122
  ca:	b0 e0       	ldi	r27, 0x00	; 0
  cc:	1c 92       	st	X, r1
  ce:	ec e7       	ldi	r30, 0x7C	; 124
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	8f 7d       	andi	r24, 0xDF	; 223
  d6:	80 83       	st	Z, r24
  d8:	80 81       	ld	r24, Z
  da:	80 64       	ori	r24, 0x40	; 64
  dc:	80 83       	st	Z, r24
  de:	8c 91       	ld	r24, X
  e0:	87 68       	ori	r24, 0x87	; 135
  e2:	8c 93       	st	X, r24
  e4:	08 95       	ret

000000e6 <adc_read>:
Returns :   result - pass the 10 bit ADC number to requesting function
Notes   :
============================================================================*/
uint16_t adc_read(uint8_t adc_channel) {
    uint16_t result = 0;
    adc_channel = (ADMUX & 0b11100000)|(adc_channel & 0b00011111);
  e6:	ec e7       	ldi	r30, 0x7C	; 124
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	90 81       	ld	r25, Z
  ec:	90 7e       	andi	r25, 0xE0	; 224
  ee:	8f 71       	andi	r24, 0x1F	; 31
  f0:	89 2b       	or	r24, r25
    ADMUX = adc_channel;
  f2:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADSC);
  f4:	ea e7       	ldi	r30, 0x7A	; 122
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	80 64       	ori	r24, 0x40	; 64
  fc:	80 83       	st	Z, r24
    while(!(ADCSRA & (1 << ADIF)));
  fe:	80 81       	ld	r24, Z
 100:	84 ff       	sbrs	r24, 4
 102:	fd cf       	rjmp	.-6      	; 0xfe <adc_read+0x18>
    result = ADCL;
 104:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    result |= ((0b00000011 & ADCH) << 0b00001000);
 108:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    ADCSRA |= (1 << ADIF);
 10c:	ea e7       	ldi	r30, 0x7A	; 122
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	90 81       	ld	r25, Z
 112:	90 61       	ori	r25, 0x10	; 16
 114:	90 83       	st	Z, r25
    return result;
 116:	23 70       	andi	r18, 0x03	; 3
 118:	90 e0       	ldi	r25, 0x00	; 0
}
 11a:	92 2b       	or	r25, r18
 11c:	08 95       	ret

0000011e <steering_wheel_init>:
Returns :   void
Notes   :
============================================================================*/
void steering_wheel_init()
{
    DDRD |= 0b11001000; // LEDs as outputs, DC
 11e:	8a b1       	in	r24, 0x0a	; 10
 120:	88 6c       	ori	r24, 0xC8	; 200
 122:	8a b9       	out	0x0a, r24	; 10
    /* Set MOSI and SCK output, all others input */
    DDRB |= 0b10100011; // CS/SS, reset
 124:	84 b1       	in	r24, 0x04	; 4
 126:	83 6a       	ori	r24, 0xA3	; 163
 128:	84 b9       	out	0x04, r24	; 4
    DDRA |= 0b00000000; // Set buttons as input
 12a:	81 b1       	in	r24, 0x01	; 1
 12c:	81 b9       	out	0x01, r24	; 1
    // TXD/MOSI_A, OLED_CS
    SPI_CLOCK_HIGH;
 12e:	2f 9a       	sbi	0x05, 7	; 5
    //uart0_init(9600);
    adc_init();
 130:	cb df       	rcall	.-106    	; 0xc8 <adc_init>
    spi_init();
 132:	57 d3       	rcall	.+1710   	; 0x7e2 <spi_init>
    OLED_init();
 134:	d6 d1       	rcall	.+940    	; 0x4e2 <OLED_init>
 136:	78 94       	sei
    sei(); // Enable interrupts
 138:	08 95       	ret

0000013a <main>:
 13a:	f1 df       	rcall	.-30     	; 0x11e <steering_wheel_init>

int main ( void )
{
    steering_wheel_init();

    Show_Pixel ( 0, 0, 1 );
 13c:	41 e0       	ldi	r20, 0x01	; 1
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	70 e0       	ldi	r23, 0x00	; 0
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	7b d2       	rcall	.+1270   	; 0x63e <Show_Pixel>
    Show_Pixel ( 1, 0, 1 );
 148:	41 e0       	ldi	r20, 0x01	; 1
 14a:	60 e0       	ldi	r22, 0x00	; 0
 14c:	70 e0       	ldi	r23, 0x00	; 0
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	75 d2       	rcall	.+1258   	; 0x63e <Show_Pixel>
    Show_Pixel ( 2, 0, 1 );
 154:	41 e0       	ldi	r20, 0x01	; 1
 156:	60 e0       	ldi	r22, 0x00	; 0
 158:	70 e0       	ldi	r23, 0x00	; 0
 15a:	82 e0       	ldi	r24, 0x02	; 2
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	6f d2       	rcall	.+1246   	; 0x63e <Show_Pixel>
    Show_Pixel ( 3, 0, 1 );
 160:	41 e0       	ldi	r20, 0x01	; 1
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	70 e0       	ldi	r23, 0x00	; 0
 166:	83 e0       	ldi	r24, 0x03	; 3
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	69 d2       	rcall	.+1234   	; 0x63e <Show_Pixel>
    Show_Pixel ( 4, 0, 1 );
 16c:	41 e0       	ldi	r20, 0x01	; 1
 16e:	60 e0       	ldi	r22, 0x00	; 0
 170:	70 e0       	ldi	r23, 0x00	; 0
 172:	84 e0       	ldi	r24, 0x04	; 4
 174:	90 e0       	ldi	r25, 0x00	; 0
    //Show_Pixel ( 0, 10, 1 );
    Present_Buffer();
 176:	63 d2       	rcall	.+1222   	; 0x63e <Show_Pixel>
    //_delay_ms ( 1000 );
    //Show_Pixel ( 0, 10, 0 );
    //Show_Pixel ( 10, 0, 1 );
    //Show_Pixel ( 10, 10, 1 );
    Show_String(50, 20, "1234567890");
 178:	f1 d1       	rcall	.+994    	; 0x55c <Present_Buffer>
 17a:	40 eb       	ldi	r20, 0xB0	; 176
 17c:	55 e0       	ldi	r21, 0x05	; 5
 17e:	64 e1       	ldi	r22, 0x14	; 20
 180:	70 e0       	ldi	r23, 0x00	; 0
 182:	82 e3       	ldi	r24, 0x32	; 50
 184:	90 e0       	ldi	r25, 0x00	; 0
    Present_Buffer();
 186:	0e d3       	rcall	.+1564   	; 0x7a4 <Show_String>
 188:	e9 d1       	rcall	.+978    	; 0x55c <Present_Buffer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18a:	2f ef       	ldi	r18, 0xFF	; 255
 18c:	80 e7       	ldi	r24, 0x70	; 112
 18e:	92 e0       	ldi	r25, 0x02	; 2
 190:	21 50       	subi	r18, 0x01	; 1
 192:	80 40       	sbci	r24, 0x00	; 0
 194:	90 40       	sbci	r25, 0x00	; 0
 196:	e1 f7       	brne	.-8      	; 0x190 <main+0x56>
 198:	00 c0       	rjmp	.+0      	; 0x19a <main+0x60>
        //} else {
        //LED_A_ON;
        //}
        /* Testing and validating ADC implementation */

        pot = adc_read ( 0 );
 19a:	00 00       	nop
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	a3 df       	rcall	.-186    	; 0xe6 <adc_read>
 1a0:	90 93 bd 05 	sts	0x05BD, r25	; 0x8005bd <__data_end+0x1>
 1a4:	80 93 bc 05 	sts	0x05BC, r24	; 0x8005bc <__data_end>
 1a8:	2f ef       	ldi	r18, 0xFF	; 255
 1aa:	80 e7       	ldi	r24, 0x70	; 112
 1ac:	92 e0       	ldi	r25, 0x02	; 2
 1ae:	21 50       	subi	r18, 0x01	; 1
 1b0:	80 40       	sbci	r24, 0x00	; 0
 1b2:	90 40       	sbci	r25, 0x00	; 0
 1b4:	e1 f7       	brne	.-8      	; 0x1ae <main+0x74>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <main+0x7e>
 1b8:	00 00       	nop

        _delay_ms ( 50 );



        if ( pot >= 0 && pot < 250 ) {
 1ba:	80 91 bc 05 	lds	r24, 0x05BC	; 0x8005bc <__data_end>
 1be:	90 91 bd 05 	lds	r25, 0x05BD	; 0x8005bd <__data_end+0x1>
 1c2:	8a 3f       	cpi	r24, 0xFA	; 250
 1c4:	91 05       	cpc	r25, r1
 1c6:	18 f4       	brcc	.+6      	; 0x1ce <main+0x94>
            LED_A_OFF;
 1c8:	5e 98       	cbi	0x0b, 6	; 11
            LED_B_OFF;
 1ca:	5f 98       	cbi	0x0b, 7	; 11
 1cc:	de cf       	rjmp	.-68     	; 0x18a <main+0x50>
        } else if ( pot >= 250 && pot < 500 ) {
 1ce:	9c 01       	movw	r18, r24
 1d0:	2a 5f       	subi	r18, 0xFA	; 250
 1d2:	31 09       	sbc	r19, r1
 1d4:	2a 3f       	cpi	r18, 0xFA	; 250
 1d6:	31 05       	cpc	r19, r1
 1d8:	18 f4       	brcc	.+6      	; 0x1e0 <main+0xa6>
            LED_A_ON;
 1da:	5e 9a       	sbi	0x0b, 6	; 11
            LED_B_OFF;
 1dc:	5f 98       	cbi	0x0b, 7	; 11
 1de:	d5 cf       	rjmp	.-86     	; 0x18a <main+0x50>
        } else if ( pot >= 500 && pot < 750 ) {
 1e0:	9c 01       	movw	r18, r24
 1e2:	24 5f       	subi	r18, 0xF4	; 244
 1e4:	31 40       	sbci	r19, 0x01	; 1
 1e6:	2a 3f       	cpi	r18, 0xFA	; 250
 1e8:	31 05       	cpc	r19, r1
 1ea:	18 f4       	brcc	.+6      	; 0x1f2 <main+0xb8>
            LED_A_OFF;
 1ec:	5e 98       	cbi	0x0b, 6	; 11
            LED_B_ON;
 1ee:	5f 9a       	sbi	0x0b, 7	; 11
 1f0:	cc cf       	rjmp	.-104    	; 0x18a <main+0x50>
        } else if ( pot >= 750 ) {
 1f2:	8e 3e       	cpi	r24, 0xEE	; 238
 1f4:	92 40       	sbci	r25, 0x02	; 2
 1f6:	48 f2       	brcs	.-110    	; 0x18a <main+0x50>
            LED_A_ON;
 1f8:	5e 9a       	sbi	0x0b, 6	; 11
            LED_B_ON;
 1fa:	5f 9a       	sbi	0x0b, 7	; 11
 1fc:	c6 cf       	rjmp	.-116    	; 0x18a <main+0x50>

000001fe <OLED_write_data>:
        }
    }
}

void Show_Char ( uint16_t x, uint16_t y, char value ) {
    Show_Font57 ( x, y, value );
 1fe:	29 98       	cbi	0x05, 1	; 5
 200:	5b 9a       	sbi	0x0b, 3	; 11
 202:	f4 d2       	rcall	.+1512   	; 0x7ec <spi_send_byte>
 204:	5b 9a       	sbi	0x0b, 3	; 11
 206:	29 9a       	sbi	0x05, 1	; 5
 208:	08 95       	ret

0000020a <OLED_write_instruction>:
 20a:	29 98       	cbi	0x05, 1	; 5
 20c:	5b 98       	cbi	0x0b, 3	; 11
 20e:	ee d2       	rcall	.+1500   	; 0x7ec <spi_send_byte>
 210:	5b 9a       	sbi	0x0b, 3	; 11
 212:	29 9a       	sbi	0x05, 1	; 5
 214:	08 95       	ret

00000216 <OLED_enable_gray_scale_table>:
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	f8 cf       	rjmp	.-16     	; 0x20a <OLED_write_instruction>
 21a:	08 95       	ret

0000021c <OLED_set_column_address>:
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	d8 2f       	mov	r29, r24
 222:	c6 2f       	mov	r28, r22
 224:	85 e1       	ldi	r24, 0x15	; 21
 226:	f1 df       	rcall	.-30     	; 0x20a <OLED_write_instruction>
 228:	8c e1       	ldi	r24, 0x1C	; 28
 22a:	8d 0f       	add	r24, r29
 22c:	e8 df       	rcall	.-48     	; 0x1fe <OLED_write_data>
 22e:	8c e1       	ldi	r24, 0x1C	; 28
 230:	8c 0f       	add	r24, r28
 232:	e5 df       	rcall	.-54     	; 0x1fe <OLED_write_data>
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	08 95       	ret

0000023a <OLED_set_row_address>:
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
 23e:	d8 2f       	mov	r29, r24
 240:	c6 2f       	mov	r28, r22
 242:	85 e7       	ldi	r24, 0x75	; 117
 244:	e2 df       	rcall	.-60     	; 0x20a <OLED_write_instruction>
 246:	8d 2f       	mov	r24, r29
 248:	da df       	rcall	.-76     	; 0x1fe <OLED_write_data>
 24a:	8c 2f       	mov	r24, r28
 24c:	d8 df       	rcall	.-80     	; 0x1fe <OLED_write_data>
 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	08 95       	ret

00000254 <OLED_enable_write_RAM>:
 254:	8c e5       	ldi	r24, 0x5C	; 92
 256:	d9 cf       	rjmp	.-78     	; 0x20a <OLED_write_instruction>
 258:	08 95       	ret

0000025a <OLED_set_display_start_line>:
 25a:	cf 93       	push	r28
 25c:	c8 2f       	mov	r28, r24
 25e:	81 ea       	ldi	r24, 0xA1	; 161
 260:	d4 df       	rcall	.-88     	; 0x20a <OLED_write_instruction>
 262:	8c 2f       	mov	r24, r28
 264:	cc df       	rcall	.-104    	; 0x1fe <OLED_write_data>
 266:	cf 91       	pop	r28
 268:	08 95       	ret

0000026a <OLED_set_display_offset>:
 26a:	cf 93       	push	r28
 26c:	c8 2f       	mov	r28, r24
 26e:	81 ea       	ldi	r24, 0xA1	; 161
 270:	cc df       	rcall	.-104    	; 0x20a <OLED_write_instruction>
 272:	8c 2f       	mov	r24, r28
 274:	c4 df       	rcall	.-120    	; 0x1fe <OLED_write_data>
 276:	cf 91       	pop	r28
 278:	08 95       	ret

0000027a <OLED_set_function_selection>:
 27a:	cf 93       	push	r28
 27c:	c8 2f       	mov	r28, r24
 27e:	8b ea       	ldi	r24, 0xAB	; 171
 280:	c4 df       	rcall	.-120    	; 0x20a <OLED_write_instruction>
 282:	8c 2f       	mov	r24, r28
 284:	bc df       	rcall	.-136    	; 0x1fe <OLED_write_data>
 286:	cf 91       	pop	r28
 288:	08 95       	ret

0000028a <OLED_set_display_off>:
 28a:	8e ea       	ldi	r24, 0xAE	; 174
 28c:	be cf       	rjmp	.-132    	; 0x20a <OLED_write_instruction>
 28e:	08 95       	ret

00000290 <OLED_set_display_on>:
 290:	8f ea       	ldi	r24, 0xAF	; 175
 292:	bb cf       	rjmp	.-138    	; 0x20a <OLED_write_instruction>
 294:	08 95       	ret

00000296 <OLED_set_phase_length>:
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	85 30       	cpi	r24, 0x05	; 5
 29c:	20 f0       	brcs	.+8      	; 0x2a6 <OLED_set_phase_length+0x10>
 29e:	80 32       	cpi	r24, 0x20	; 32
 2a0:	18 f0       	brcs	.+6      	; 0x2a8 <OLED_set_phase_length+0x12>
 2a2:	8f e1       	ldi	r24, 0x1F	; 31
 2a4:	01 c0       	rjmp	.+2      	; 0x2a8 <OLED_set_phase_length+0x12>
 2a6:	85 e0       	ldi	r24, 0x05	; 5
 2a8:	d8 2f       	mov	r29, r24
 2aa:	d6 95       	lsr	r29
 2ac:	63 30       	cpi	r22, 0x03	; 3
 2ae:	28 f0       	brcs	.+10     	; 0x2ba <OLED_set_phase_length+0x24>
 2b0:	c6 2f       	mov	r28, r22
 2b2:	60 31       	cpi	r22, 0x10	; 16
 2b4:	18 f0       	brcs	.+6      	; 0x2bc <OLED_set_phase_length+0x26>
 2b6:	cf e0       	ldi	r28, 0x0F	; 15
 2b8:	01 c0       	rjmp	.+2      	; 0x2bc <OLED_set_phase_length+0x26>
 2ba:	c3 e0       	ldi	r28, 0x03	; 3
 2bc:	81 eb       	ldi	r24, 0xB1	; 177
 2be:	a5 df       	rcall	.-182    	; 0x20a <OLED_write_instruction>
 2c0:	c6 95       	lsr	r28
 2c2:	20 e1       	ldi	r18, 0x10	; 16
 2c4:	c2 9f       	mul	r28, r18
 2c6:	c0 01       	movw	r24, r0
 2c8:	11 24       	eor	r1, r1
 2ca:	8d 2b       	or	r24, r29
 2cc:	98 df       	rcall	.-208    	; 0x1fe <OLED_write_data>
 2ce:	df 91       	pop	r29
 2d0:	cf 91       	pop	r28
 2d2:	08 95       	ret

000002d4 <OLED_set_front_clock>:
 2d4:	cf 93       	push	r28
 2d6:	df 93       	push	r29
 2d8:	d8 2f       	mov	r29, r24
 2da:	c6 2f       	mov	r28, r22
 2dc:	83 eb       	ldi	r24, 0xB3	; 179
 2de:	95 df       	rcall	.-214    	; 0x20a <OLED_write_instruction>
 2e0:	20 e1       	ldi	r18, 0x10	; 16
 2e2:	c2 9f       	mul	r28, r18
 2e4:	c0 01       	movw	r24, r0
 2e6:	11 24       	eor	r1, r1
 2e8:	8d 2b       	or	r24, r29
 2ea:	89 df       	rcall	.-238    	; 0x1fe <OLED_write_data>
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	08 95       	ret

000002f2 <OLED_set_display_enhancement_A>:
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
 2f6:	d8 2f       	mov	r29, r24
 2f8:	c6 2f       	mov	r28, r22
 2fa:	84 eb       	ldi	r24, 0xB4	; 180
 2fc:	86 df       	rcall	.-244    	; 0x20a <OLED_write_instruction>
 2fe:	8d 2f       	mov	r24, r29
 300:	80 6a       	ori	r24, 0xA0	; 160
 302:	7d df       	rcall	.-262    	; 0x1fe <OLED_write_data>
 304:	8c 2f       	mov	r24, r28
 306:	88 0f       	add	r24, r24
 308:	88 0f       	add	r24, r24
 30a:	88 0f       	add	r24, r24
 30c:	85 60       	ori	r24, 0x05	; 5
 30e:	77 df       	rcall	.-274    	; 0x1fe <OLED_write_data>
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	08 95       	ret

00000316 <OLED_set_GPIO>:
 316:	cf 93       	push	r28
 318:	df 93       	push	r29
 31a:	d8 2f       	mov	r29, r24
 31c:	c6 2f       	mov	r28, r22
 31e:	85 eb       	ldi	r24, 0xB5	; 181
 320:	74 df       	rcall	.-280    	; 0x20a <OLED_write_instruction>
 322:	8c 2f       	mov	r24, r28
 324:	88 0f       	add	r24, r24
 326:	88 0f       	add	r24, r24
 328:	8d 2b       	or	r24, r29
 32a:	69 df       	rcall	.-302    	; 0x1fe <OLED_write_data>
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	08 95       	ret

00000332 <OLED_set_second_precharge_period>:
 332:	cf 93       	push	r28
 334:	c8 2f       	mov	r28, r24
 336:	86 eb       	ldi	r24, 0xB6	; 182
 338:	68 df       	rcall	.-304    	; 0x20a <OLED_write_instruction>
 33a:	8c 2f       	mov	r24, r28
 33c:	c0 31       	cpi	r28, 0x10	; 16
 33e:	08 f0       	brcs	.+2      	; 0x342 <OLED_set_second_precharge_period+0x10>
 340:	8f e0       	ldi	r24, 0x0F	; 15
 342:	5d df       	rcall	.-326    	; 0x1fe <OLED_write_data>
 344:	cf 91       	pop	r28
 346:	08 95       	ret

00000348 <OLED_set_gray_scale_table>:
 348:	8f 92       	push	r8
 34a:	af 92       	push	r10
 34c:	bf 92       	push	r11
 34e:	cf 92       	push	r12
 350:	df 92       	push	r13
 352:	ef 92       	push	r14
 354:	ff 92       	push	r15
 356:	0f 93       	push	r16
 358:	1f 93       	push	r17
 35a:	cf 93       	push	r28
 35c:	df 93       	push	r29
 35e:	cd b7       	in	r28, 0x3d	; 61
 360:	de b7       	in	r29, 0x3e	; 62
 362:	b8 2e       	mov	r11, r24
 364:	d6 2e       	mov	r13, r22
 366:	f4 2e       	mov	r15, r20
 368:	12 2f       	mov	r17, r18
 36a:	88 eb       	ldi	r24, 0xB8	; 184
 36c:	4e df       	rcall	.-356    	; 0x20a <OLED_write_instruction>
 36e:	8b 2d       	mov	r24, r11
 370:	46 df       	rcall	.-372    	; 0x1fe <OLED_write_data>
 372:	8d 2d       	mov	r24, r13
 374:	44 df       	rcall	.-376    	; 0x1fe <OLED_write_data>
 376:	8f 2d       	mov	r24, r15
 378:	42 df       	rcall	.-380    	; 0x1fe <OLED_write_data>
 37a:	81 2f       	mov	r24, r17
 37c:	40 df       	rcall	.-384    	; 0x1fe <OLED_write_data>
 37e:	80 2f       	mov	r24, r16
 380:	3e df       	rcall	.-388    	; 0x1fe <OLED_write_data>
 382:	8e 2d       	mov	r24, r14
 384:	3c df       	rcall	.-392    	; 0x1fe <OLED_write_data>
 386:	8c 2d       	mov	r24, r12
 388:	3a df       	rcall	.-396    	; 0x1fe <OLED_write_data>
 38a:	8a 2d       	mov	r24, r10
 38c:	38 df       	rcall	.-400    	; 0x1fe <OLED_write_data>
 38e:	88 2d       	mov	r24, r8
 390:	36 df       	rcall	.-404    	; 0x1fe <OLED_write_data>
 392:	8e 85       	ldd	r24, Y+14	; 0x0e
 394:	34 df       	rcall	.-408    	; 0x1fe <OLED_write_data>
 396:	8f 85       	ldd	r24, Y+15	; 0x0f
 398:	32 df       	rcall	.-412    	; 0x1fe <OLED_write_data>
 39a:	88 89       	ldd	r24, Y+16	; 0x10
 39c:	30 df       	rcall	.-416    	; 0x1fe <OLED_write_data>
 39e:	89 89       	ldd	r24, Y+17	; 0x11
 3a0:	2e df       	rcall	.-420    	; 0x1fe <OLED_write_data>
 3a2:	8a 89       	ldd	r24, Y+18	; 0x12
 3a4:	2c df       	rcall	.-424    	; 0x1fe <OLED_write_data>
 3a6:	8b 89       	ldd	r24, Y+19	; 0x13
 3a8:	2a df       	rcall	.-428    	; 0x1fe <OLED_write_data>
 3aa:	35 df       	rcall	.-406    	; 0x216 <OLED_enable_gray_scale_table>
 3ac:	df 91       	pop	r29
 3ae:	cf 91       	pop	r28
 3b0:	1f 91       	pop	r17
 3b2:	0f 91       	pop	r16
 3b4:	ff 90       	pop	r15
 3b6:	ef 90       	pop	r14
 3b8:	df 90       	pop	r13
 3ba:	cf 90       	pop	r12
 3bc:	bf 90       	pop	r11
 3be:	af 90       	pop	r10
 3c0:	8f 90       	pop	r8
 3c2:	08 95       	ret

000003c4 <OLED_set_gray_scale_table_oled_default>:
 3c4:	8f 92       	push	r8
 3c6:	af 92       	push	r10
 3c8:	cf 92       	push	r12
 3ca:	ef 92       	push	r14
 3cc:	0f 93       	push	r16
 3ce:	84 eb       	ldi	r24, 0xB4	; 180
 3d0:	8f 93       	push	r24
 3d2:	88 ea       	ldi	r24, 0xA8	; 168
 3d4:	8f 93       	push	r24
 3d6:	8c e9       	ldi	r24, 0x9C	; 156
 3d8:	8f 93       	push	r24
 3da:	80 e9       	ldi	r24, 0x90	; 144
 3dc:	8f 93       	push	r24
 3de:	84 e8       	ldi	r24, 0x84	; 132
 3e0:	8f 93       	push	r24
 3e2:	88 e7       	ldi	r24, 0x78	; 120
 3e4:	8f 93       	push	r24
 3e6:	0f 2e       	mov	r0, r31
 3e8:	fc e6       	ldi	r31, 0x6C	; 108
 3ea:	8f 2e       	mov	r8, r31
 3ec:	f0 2d       	mov	r31, r0
 3ee:	0f 2e       	mov	r0, r31
 3f0:	f0 e6       	ldi	r31, 0x60	; 96
 3f2:	af 2e       	mov	r10, r31
 3f4:	f0 2d       	mov	r31, r0
 3f6:	0f 2e       	mov	r0, r31
 3f8:	f4 e5       	ldi	r31, 0x54	; 84
 3fa:	cf 2e       	mov	r12, r31
 3fc:	f0 2d       	mov	r31, r0
 3fe:	0f 2e       	mov	r0, r31
 400:	f8 e4       	ldi	r31, 0x48	; 72
 402:	ef 2e       	mov	r14, r31
 404:	f0 2d       	mov	r31, r0
 406:	0c e3       	ldi	r16, 0x3C	; 60
 408:	20 e3       	ldi	r18, 0x30	; 48
 40a:	44 e2       	ldi	r20, 0x24	; 36
 40c:	68 e1       	ldi	r22, 0x18	; 24
 40e:	8c e0       	ldi	r24, 0x0C	; 12
 410:	9b df       	rcall	.-202    	; 0x348 <OLED_set_gray_scale_table>
 412:	0f 90       	pop	r0
 414:	0f 90       	pop	r0
 416:	0f 90       	pop	r0
 418:	0f 90       	pop	r0
 41a:	0f 90       	pop	r0
 41c:	0f 90       	pop	r0
 41e:	0f 91       	pop	r16
 420:	ef 90       	pop	r14
 422:	cf 90       	pop	r12
 424:	af 90       	pop	r10
 426:	8f 90       	pop	r8
 428:	08 95       	ret

0000042a <OLED_set_precharge_voltage>:
 42a:	cf 93       	push	r28
 42c:	c8 2f       	mov	r28, r24
 42e:	8b eb       	ldi	r24, 0xBB	; 187
 430:	ec de       	rcall	.-552    	; 0x20a <OLED_write_instruction>
 432:	8c 2f       	mov	r24, r28
 434:	e4 de       	rcall	.-568    	; 0x1fe <OLED_write_data>
 436:	cf 91       	pop	r28
 438:	08 95       	ret

0000043a <OLED_set_deselect_voltage>:
 43a:	cf 93       	push	r28
 43c:	c8 2f       	mov	r28, r24
 43e:	8e eb       	ldi	r24, 0xBE	; 190
 440:	e4 de       	rcall	.-568    	; 0x20a <OLED_write_instruction>
 442:	8c 2f       	mov	r24, r28
 444:	dc de       	rcall	.-584    	; 0x1fe <OLED_write_data>
 446:	cf 91       	pop	r28
 448:	08 95       	ret

0000044a <OLED_set_contrast_current>:
 44a:	cf 93       	push	r28
 44c:	c8 2f       	mov	r28, r24
 44e:	81 ec       	ldi	r24, 0xC1	; 193
 450:	dc de       	rcall	.-584    	; 0x20a <OLED_write_instruction>
 452:	8c 2f       	mov	r24, r28
 454:	d4 de       	rcall	.-600    	; 0x1fe <OLED_write_data>
 456:	cf 91       	pop	r28
 458:	08 95       	ret

0000045a <OLED_set_master_contrast_current_control>:
 45a:	cf 93       	push	r28
 45c:	c8 2f       	mov	r28, r24
 45e:	87 ec       	ldi	r24, 0xC7	; 199
 460:	d4 de       	rcall	.-600    	; 0x20a <OLED_write_instruction>
 462:	8c 2f       	mov	r24, r28
 464:	cc de       	rcall	.-616    	; 0x1fe <OLED_write_data>
 466:	cf 91       	pop	r28
 468:	08 95       	ret

0000046a <OLED_set_MUX_ratio>:
 46a:	cf 93       	push	r28
 46c:	c8 2f       	mov	r28, r24
 46e:	8a ec       	ldi	r24, 0xCA	; 202
 470:	cc de       	rcall	.-616    	; 0x20a <OLED_write_instruction>
 472:	8c 2f       	mov	r24, r28
 474:	c4 de       	rcall	.-632    	; 0x1fe <OLED_write_data>
 476:	cf 91       	pop	r28
 478:	08 95       	ret

0000047a <OLED_set_display_enhancement_B>:
 47a:	cf 93       	push	r28
 47c:	c8 2f       	mov	r28, r24
 47e:	81 ed       	ldi	r24, 0xD1	; 209
 480:	c4 de       	rcall	.-632    	; 0x20a <OLED_write_instruction>
 482:	20 e1       	ldi	r18, 0x10	; 16
 484:	c2 9f       	mul	r28, r18
 486:	c0 01       	movw	r24, r0
 488:	11 24       	eor	r1, r1
 48a:	82 68       	ori	r24, 0x82	; 130
 48c:	b8 de       	rcall	.-656    	; 0x1fe <OLED_write_data>
 48e:	80 e2       	ldi	r24, 0x20	; 32
 490:	b6 de       	rcall	.-660    	; 0x1fe <OLED_write_data>
 492:	cf 91       	pop	r28
 494:	08 95       	ret

00000496 <OLED_set_command_lock>:
 496:	cf 93       	push	r28
 498:	c8 2f       	mov	r28, r24
 49a:	8d ef       	ldi	r24, 0xFD	; 253
 49c:	b6 de       	rcall	.-660    	; 0x20a <OLED_write_instruction>
 49e:	8c 2f       	mov	r24, r28
 4a0:	88 0f       	add	r24, r24
 4a2:	88 0f       	add	r24, r24
 4a4:	82 61       	ori	r24, 0x12	; 18
 4a6:	ab de       	rcall	.-682    	; 0x1fe <OLED_write_data>
 4a8:	cf 91       	pop	r28
 4aa:	08 95       	ret

000004ac <OLED_fill_ram>:
 4ac:	1f 93       	push	r17
 4ae:	cf 93       	push	r28
 4b0:	df 93       	push	r29
 4b2:	d8 2f       	mov	r29, r24
 4b4:	60 e4       	ldi	r22, 0x40	; 64
 4b6:	80 e0       	ldi	r24, 0x00	; 0
 4b8:	b1 de       	rcall	.-670    	; 0x21c <OLED_set_column_address>
 4ba:	60 e4       	ldi	r22, 0x40	; 64
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	bd de       	rcall	.-646    	; 0x23a <OLED_set_row_address>
 4c0:	c9 de       	rcall	.-622    	; 0x254 <OLED_enable_write_RAM>
 4c2:	10 e4       	ldi	r17, 0x40	; 64
 4c4:	08 c0       	rjmp	.+16     	; 0x4d6 <OLED_fill_ram+0x2a>
 4c6:	8d 2f       	mov	r24, r29
 4c8:	9a de       	rcall	.-716    	; 0x1fe <OLED_write_data>
 4ca:	8d 2f       	mov	r24, r29
 4cc:	98 de       	rcall	.-720    	; 0x1fe <OLED_write_data>
 4ce:	c1 50       	subi	r28, 0x01	; 1
 4d0:	d1 f7       	brne	.-12     	; 0x4c6 <OLED_fill_ram+0x1a>
 4d2:	11 50       	subi	r17, 0x01	; 1
 4d4:	11 f0       	breq	.+4      	; 0x4da <OLED_fill_ram+0x2e>
 4d6:	c0 e4       	ldi	r28, 0x40	; 64
 4d8:	f6 cf       	rjmp	.-20     	; 0x4c6 <OLED_fill_ram+0x1a>
 4da:	df 91       	pop	r29
 4dc:	cf 91       	pop	r28
 4de:	1f 91       	pop	r17
 4e0:	08 95       	ret

000004e2 <OLED_init>:
 4e2:	28 98       	cbi	0x05, 0	; 5
 4e4:	2f ef       	ldi	r18, 0xFF	; 255
 4e6:	83 ed       	ldi	r24, 0xD3	; 211
 4e8:	90 e3       	ldi	r25, 0x30	; 48
 4ea:	21 50       	subi	r18, 0x01	; 1
 4ec:	80 40       	sbci	r24, 0x00	; 0
 4ee:	90 40       	sbci	r25, 0x00	; 0
 4f0:	e1 f7       	brne	.-8      	; 0x4ea <OLED_init+0x8>
 4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <OLED_init+0x12>
 4f4:	00 00       	nop
 4f6:	28 9a       	sbi	0x05, 0	; 5
 4f8:	80 e0       	ldi	r24, 0x00	; 0
 4fa:	cd df       	rcall	.-102    	; 0x496 <OLED_set_command_lock>
 4fc:	c6 de       	rcall	.-628    	; 0x28a <OLED_set_display_off>
 4fe:	69 e0       	ldi	r22, 0x09	; 9
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	e8 de       	rcall	.-560    	; 0x2d4 <OLED_set_front_clock>
 504:	8f e3       	ldi	r24, 0x3F	; 63
 506:	b1 df       	rcall	.-158    	; 0x46a <OLED_set_MUX_ratio>
 508:	80 e0       	ldi	r24, 0x00	; 0
 50a:	af de       	rcall	.-674    	; 0x26a <OLED_set_display_offset>
 50c:	80 e0       	ldi	r24, 0x00	; 0
 50e:	a5 de       	rcall	.-694    	; 0x25a <OLED_set_display_start_line>
 510:	80 ea       	ldi	r24, 0xA0	; 160
 512:	7b de       	rcall	.-778    	; 0x20a <OLED_write_instruction>
 514:	84 e1       	ldi	r24, 0x14	; 20
 516:	73 de       	rcall	.-794    	; 0x1fe <OLED_write_data>
 518:	81 e1       	ldi	r24, 0x11	; 17
 51a:	71 de       	rcall	.-798    	; 0x1fe <OLED_write_data>
 51c:	60 e0       	ldi	r22, 0x00	; 0
 51e:	80 e0       	ldi	r24, 0x00	; 0
 520:	fa de       	rcall	.-524    	; 0x316 <OLED_set_GPIO>
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	aa de       	rcall	.-684    	; 0x27a <OLED_set_function_selection>
 526:	6f e1       	ldi	r22, 0x1F	; 31
 528:	80 e0       	ldi	r24, 0x00	; 0
 52a:	e3 de       	rcall	.-570    	; 0x2f2 <OLED_set_display_enhancement_A>
 52c:	8f e7       	ldi	r24, 0x7F	; 127
 52e:	8d df       	rcall	.-230    	; 0x44a <OLED_set_contrast_current>
 530:	8f e0       	ldi	r24, 0x0F	; 15
 532:	93 df       	rcall	.-218    	; 0x45a <OLED_set_master_contrast_current_control>
 534:	47 df       	rcall	.-370    	; 0x3c4 <OLED_set_gray_scale_table_oled_default>
 536:	6e e0       	ldi	r22, 0x0E	; 14
 538:	85 e0       	ldi	r24, 0x05	; 5
 53a:	ad de       	rcall	.-678    	; 0x296 <OLED_set_phase_length>
 53c:	80 e0       	ldi	r24, 0x00	; 0
 53e:	9d df       	rcall	.-198    	; 0x47a <OLED_set_display_enhancement_B>
 540:	8f e1       	ldi	r24, 0x1F	; 31
 542:	73 df       	rcall	.-282    	; 0x42a <OLED_set_precharge_voltage>
 544:	88 e0       	ldi	r24, 0x08	; 8
 546:	f5 de       	rcall	.-534    	; 0x332 <OLED_set_second_precharge_period>
 548:	87 e0       	ldi	r24, 0x07	; 7
 54a:	77 df       	rcall	.-274    	; 0x43a <OLED_set_deselect_voltage>
 54c:	86 ea       	ldi	r24, 0xA6	; 166
 54e:	5d de       	rcall	.-838    	; 0x20a <OLED_write_instruction>
 550:	89 ea       	ldi	r24, 0xA9	; 169
 552:	5b de       	rcall	.-842    	; 0x20a <OLED_write_instruction>
 554:	80 e0       	ldi	r24, 0x00	; 0
 556:	aa df       	rcall	.-172    	; 0x4ac <OLED_fill_ram>
 558:	9b ce       	rjmp	.-714    	; 0x290 <OLED_set_display_on>
 55a:	08 95       	ret

0000055c <Present_Buffer>:
 55c:	8f 92       	push	r8
 55e:	9f 92       	push	r9
 560:	af 92       	push	r10
 562:	bf 92       	push	r11
 564:	cf 92       	push	r12
 566:	df 92       	push	r13
 568:	ef 92       	push	r14
 56a:	ff 92       	push	r15
 56c:	0f 93       	push	r16
 56e:	1f 93       	push	r17
 570:	cf 93       	push	r28
 572:	df 93       	push	r29
 574:	0f 2e       	mov	r0, r31
 576:	f6 ec       	ldi	r31, 0xC6	; 198
 578:	af 2e       	mov	r10, r31
 57a:	f5 e0       	ldi	r31, 0x05	; 5
 57c:	bf 2e       	mov	r11, r31
 57e:	f0 2d       	mov	r31, r0
 580:	81 2c       	mov	r8, r1
 582:	4d c0       	rjmp	.+154    	; 0x61e <Present_Buffer+0xc2>
 584:	f6 01       	movw	r30, r12
 586:	11 91       	ld	r17, Z+
 588:	6f 01       	movw	r12, r30
 58a:	21 2f       	mov	r18, r17
 58c:	23 70       	andi	r18, 0x03	; 3
 58e:	81 2f       	mov	r24, r17
 590:	8c 70       	andi	r24, 0x0C	; 12
 592:	e8 2e       	mov	r14, r24
 594:	f1 2c       	mov	r15, r1
 596:	f5 94       	asr	r15
 598:	e7 94       	ror	r14
 59a:	f5 94       	asr	r15
 59c:	e7 94       	ror	r14
 59e:	c1 2f       	mov	r28, r17
 5a0:	c0 73       	andi	r28, 0x30	; 48
 5a2:	d0 e0       	ldi	r29, 0x00	; 0
 5a4:	d5 95       	asr	r29
 5a6:	c7 95       	ror	r28
 5a8:	d5 95       	asr	r29
 5aa:	c7 95       	ror	r28
 5ac:	d5 95       	asr	r29
 5ae:	c7 95       	ror	r28
 5b0:	d5 95       	asr	r29
 5b2:	c7 95       	ror	r28
 5b4:	12 95       	swap	r17
 5b6:	16 95       	lsr	r17
 5b8:	16 95       	lsr	r17
 5ba:	13 70       	andi	r17, 0x03	; 3
 5bc:	02 2f       	mov	r16, r18
 5be:	00 0f       	add	r16, r16
 5c0:	00 0f       	add	r16, r16
 5c2:	02 2b       	or	r16, r18
 5c4:	67 e7       	ldi	r22, 0x77	; 119
 5c6:	89 2d       	mov	r24, r9
 5c8:	29 de       	rcall	.-942    	; 0x21c <OLED_set_column_address>
 5ca:	6f e7       	ldi	r22, 0x7F	; 127
 5cc:	88 2d       	mov	r24, r8
 5ce:	35 de       	rcall	.-918    	; 0x23a <OLED_set_row_address>
 5d0:	41 de       	rcall	.-894    	; 0x254 <OLED_enable_write_RAM>
 5d2:	c7 01       	movw	r24, r14
 5d4:	88 0f       	add	r24, r24
 5d6:	99 1f       	adc	r25, r25
 5d8:	88 0f       	add	r24, r24
 5da:	99 1f       	adc	r25, r25
 5dc:	8e 29       	or	r24, r14
 5de:	f0 e1       	ldi	r31, 0x10	; 16
 5e0:	0f 9f       	mul	r16, r31
 5e2:	90 01       	movw	r18, r0
 5e4:	11 24       	eor	r1, r1
 5e6:	82 2b       	or	r24, r18
 5e8:	0a de       	rcall	.-1004   	; 0x1fe <OLED_write_data>
 5ea:	ce 01       	movw	r24, r28
 5ec:	88 0f       	add	r24, r24
 5ee:	99 1f       	adc	r25, r25
 5f0:	88 0f       	add	r24, r24
 5f2:	99 1f       	adc	r25, r25
 5f4:	c8 2b       	or	r28, r24
 5f6:	80 e1       	ldi	r24, 0x10	; 16
 5f8:	c8 9f       	mul	r28, r24
 5fa:	e0 01       	movw	r28, r0
 5fc:	11 24       	eor	r1, r1
 5fe:	81 2f       	mov	r24, r17
 600:	88 0f       	add	r24, r24
 602:	88 0f       	add	r24, r24
 604:	81 2b       	or	r24, r17
 606:	8c 2b       	or	r24, r28
 608:	fa dd       	rcall	.-1036   	; 0x1fe <OLED_write_data>
 60a:	93 94       	inc	r9
 60c:	e0 e4       	ldi	r30, 0x40	; 64
 60e:	9e 12       	cpse	r9, r30
 610:	b9 cf       	rjmp	.-142    	; 0x584 <Present_Buffer+0x28>
 612:	83 94       	inc	r8
 614:	f0 e4       	ldi	r31, 0x40	; 64
 616:	af 0e       	add	r10, r31
 618:	b1 1c       	adc	r11, r1
 61a:	8e 16       	cp	r8, r30
 61c:	19 f0       	breq	.+6      	; 0x624 <Present_Buffer+0xc8>
 61e:	65 01       	movw	r12, r10
 620:	91 2c       	mov	r9, r1
 622:	b0 cf       	rjmp	.-160    	; 0x584 <Present_Buffer+0x28>
 624:	df 91       	pop	r29
 626:	cf 91       	pop	r28
 628:	1f 91       	pop	r17
 62a:	0f 91       	pop	r16
 62c:	ff 90       	pop	r15
 62e:	ef 90       	pop	r14
 630:	df 90       	pop	r13
 632:	cf 90       	pop	r12
 634:	bf 90       	pop	r11
 636:	af 90       	pop	r10
 638:	9f 90       	pop	r9
 63a:	8f 90       	pop	r8
 63c:	08 95       	ret

0000063e <Show_Pixel>:
 63e:	fc 01       	movw	r30, r24
 640:	e3 70       	andi	r30, 0x03	; 3
 642:	ff 27       	eor	r31, r31
 644:	96 95       	lsr	r25
 646:	87 95       	ror	r24
 648:	96 95       	lsr	r25
 64a:	87 95       	ror	r24
 64c:	00 24       	eor	r0, r0
 64e:	76 95       	lsr	r23
 650:	67 95       	ror	r22
 652:	07 94       	ror	r0
 654:	76 95       	lsr	r23
 656:	67 95       	ror	r22
 658:	07 94       	ror	r0
 65a:	76 2f       	mov	r23, r22
 65c:	60 2d       	mov	r22, r0
 65e:	68 0f       	add	r22, r24
 660:	79 1f       	adc	r23, r25
 662:	9b 01       	movw	r18, r22
 664:	77 23       	and	r23, r23
 666:	14 f4       	brge	.+4      	; 0x66c <Show_Pixel+0x2e>
 668:	29 5f       	subi	r18, 0xF9	; 249
 66a:	3f 4f       	sbci	r19, 0xFF	; 255
 66c:	35 95       	asr	r19
 66e:	27 95       	ror	r18
 670:	35 95       	asr	r19
 672:	27 95       	ror	r18
 674:	35 95       	asr	r19
 676:	27 95       	ror	r18
 678:	51 e0       	ldi	r21, 0x01	; 1
 67a:	41 11       	cpse	r20, r1
 67c:	01 c0       	rjmp	.+2      	; 0x680 <Show_Pixel+0x42>
 67e:	50 e0       	ldi	r21, 0x00	; 0
 680:	85 2f       	mov	r24, r21
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	88 0f       	add	r24, r24
 686:	99 1f       	adc	r25, r25
 688:	85 2b       	or	r24, r21
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	0e 2e       	mov	r0, r30
 68e:	02 c0       	rjmp	.+4      	; 0x694 <Show_Pixel+0x56>
 690:	88 0f       	add	r24, r24
 692:	99 1f       	adc	r25, r25
 694:	0a 94       	dec	r0
 696:	e2 f7       	brpl	.-8      	; 0x690 <Show_Pixel+0x52>
 698:	db 01       	movw	r26, r22
 69a:	aa 53       	subi	r26, 0x3A	; 58
 69c:	ba 4f       	sbci	r27, 0xFA	; 250
 69e:	43 e0       	ldi	r20, 0x03	; 3
 6a0:	50 e0       	ldi	r21, 0x00	; 0
 6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <Show_Pixel+0x6a>
 6a4:	44 0f       	add	r20, r20
 6a6:	55 1f       	adc	r21, r21
 6a8:	ea 95       	dec	r30
 6aa:	e2 f7       	brpl	.-8      	; 0x6a4 <Show_Pixel+0x66>
 6ac:	40 95       	com	r20
 6ae:	9c 91       	ld	r25, X
 6b0:	49 23       	and	r20, r25
 6b2:	84 2b       	or	r24, r20
 6b4:	8c 93       	st	X, r24
 6b6:	f9 01       	movw	r30, r18
 6b8:	e0 53       	subi	r30, 0x30	; 48
 6ba:	fa 4e       	sbci	r31, 0xEA	; 234
 6bc:	67 70       	andi	r22, 0x07	; 7
 6be:	70 78       	andi	r23, 0x80	; 128
 6c0:	77 23       	and	r23, r23
 6c2:	34 f4       	brge	.+12     	; 0x6d0 <Show_Pixel+0x92>
 6c4:	61 50       	subi	r22, 0x01	; 1
 6c6:	71 09       	sbc	r23, r1
 6c8:	68 6f       	ori	r22, 0xF8	; 248
 6ca:	7f 6f       	ori	r23, 0xFF	; 255
 6cc:	6f 5f       	subi	r22, 0xFF	; 255
 6ce:	7f 4f       	sbci	r23, 0xFF	; 255
 6d0:	81 e0       	ldi	r24, 0x01	; 1
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	02 c0       	rjmp	.+4      	; 0x6da <Show_Pixel+0x9c>
 6d6:	88 0f       	add	r24, r24
 6d8:	99 1f       	adc	r25, r25
 6da:	6a 95       	dec	r22
 6dc:	e2 f7       	brpl	.-8      	; 0x6d6 <Show_Pixel+0x98>
 6de:	d9 01       	movw	r26, r18
 6e0:	a0 53       	subi	r26, 0x30	; 48
 6e2:	ba 4e       	sbci	r27, 0xEA	; 234
 6e4:	9c 91       	ld	r25, X
 6e6:	89 2b       	or	r24, r25
 6e8:	80 83       	st	Z, r24
 6ea:	08 95       	ret

000006ec <Show_Font57>:
 6ec:	4f 92       	push	r4
 6ee:	5f 92       	push	r5
 6f0:	6f 92       	push	r6
 6f2:	7f 92       	push	r7
 6f4:	8f 92       	push	r8
 6f6:	9f 92       	push	r9
 6f8:	af 92       	push	r10
 6fa:	bf 92       	push	r11
 6fc:	cf 92       	push	r12
 6fe:	df 92       	push	r13
 700:	ef 92       	push	r14
 702:	ff 92       	push	r15
 704:	0f 93       	push	r16
 706:	1f 93       	push	r17
 708:	cf 93       	push	r28
 70a:	df 93       	push	r29
 70c:	58 2e       	mov	r5, r24
 70e:	49 2e       	mov	r4, r25
 710:	5b 01       	movw	r10, r22
 712:	40 32       	cpi	r20, 0x20	; 32
 714:	11 f0       	breq	.+4      	; 0x71a <Show_Font57+0x2e>
 716:	40 52       	subi	r20, 0x20	; 32
 718:	01 c0       	rjmp	.+2      	; 0x71c <Show_Font57+0x30>
 71a:	40 e6       	ldi	r20, 0x60	; 96
 71c:	84 2f       	mov	r24, r20
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	01 97       	sbiw	r24, 0x01	; 1
 722:	3c 01       	movw	r6, r24
 724:	66 0c       	add	r6, r6
 726:	77 1c       	adc	r7, r7
 728:	66 0c       	add	r6, r6
 72a:	77 1c       	adc	r7, r7
 72c:	86 0d       	add	r24, r6
 72e:	97 1d       	adc	r25, r7
 730:	9c 01       	movw	r18, r24
 732:	20 50       	subi	r18, 0x00	; 0
 734:	3f 4f       	sbci	r19, 0xFF	; 255
 736:	39 01       	movw	r6, r18
 738:	00 e0       	ldi	r16, 0x00	; 0
 73a:	10 e0       	ldi	r17, 0x00	; 0
 73c:	69 01       	movw	r12, r18
 73e:	35 e0       	ldi	r19, 0x05	; 5
 740:	c3 0e       	add	r12, r19
 742:	d1 1c       	adc	r13, r1
 744:	17 c0       	rjmp	.+46     	; 0x774 <Show_Font57+0x88>
 746:	f4 01       	movw	r30, r8
 748:	41 91       	ld	r20, Z+
 74a:	4f 01       	movw	r8, r30
 74c:	50 e0       	ldi	r21, 0x00	; 0
 74e:	00 2e       	mov	r0, r16
 750:	02 c0       	rjmp	.+4      	; 0x756 <Show_Font57+0x6a>
 752:	55 95       	asr	r21
 754:	47 95       	ror	r20
 756:	0a 94       	dec	r0
 758:	e2 f7       	brpl	.-8      	; 0x752 <Show_Font57+0x66>
 75a:	41 70       	andi	r20, 0x01	; 1
 75c:	b7 01       	movw	r22, r14
 75e:	ce 01       	movw	r24, r28
 760:	6e df       	rcall	.-292    	; 0x63e <Show_Pixel>
 762:	21 96       	adiw	r28, 0x01	; 1
 764:	8c 14       	cp	r8, r12
 766:	9d 04       	cpc	r9, r13
 768:	71 f7       	brne	.-36     	; 0x746 <Show_Font57+0x5a>
 76a:	0f 5f       	subi	r16, 0xFF	; 255
 76c:	1f 4f       	sbci	r17, 0xFF	; 255
 76e:	08 30       	cpi	r16, 0x08	; 8
 770:	11 05       	cpc	r17, r1
 772:	39 f0       	breq	.+14     	; 0x782 <Show_Font57+0x96>
 774:	43 01       	movw	r8, r6
 776:	c5 2d       	mov	r28, r5
 778:	d4 2d       	mov	r29, r4
 77a:	75 01       	movw	r14, r10
 77c:	e0 0e       	add	r14, r16
 77e:	f1 1e       	adc	r15, r17
 780:	e2 cf       	rjmp	.-60     	; 0x746 <Show_Font57+0x5a>
 782:	df 91       	pop	r29
 784:	cf 91       	pop	r28
 786:	1f 91       	pop	r17
 788:	0f 91       	pop	r16
 78a:	ff 90       	pop	r15
 78c:	ef 90       	pop	r14
 78e:	df 90       	pop	r13
 790:	cf 90       	pop	r12
 792:	bf 90       	pop	r11
 794:	af 90       	pop	r10
 796:	9f 90       	pop	r9
 798:	8f 90       	pop	r8
 79a:	7f 90       	pop	r7
 79c:	6f 90       	pop	r6
 79e:	5f 90       	pop	r5
 7a0:	4f 90       	pop	r4
 7a2:	08 95       	ret

000007a4 <Show_String>:
}
void Show_String ( uint16_t x, uint16_t y, char* value ) {
 7a4:	ef 92       	push	r14
 7a6:	ff 92       	push	r15
 7a8:	0f 93       	push	r16
 7aa:	1f 93       	push	r17
 7ac:	cf 93       	push	r28
 7ae:	df 93       	push	r29
 7b0:	ec 01       	movw	r28, r24
 7b2:	7b 01       	movw	r14, r22
 7b4:	fa 01       	movw	r30, r20
    const uint16_t characterWidth = 6;

    int index = 0;

    // loop through value until we get a NULL (c has NULL terminated strings)
    while ( value[index] != 0 ) {
 7b6:	40 81       	ld	r20, Z
 7b8:	44 23       	and	r20, r20
 7ba:	61 f0       	breq	.+24     	; 0x7d4 <Show_String+0x30>
 7bc:	8f 01       	movw	r16, r30
 7be:	0f 5f       	subi	r16, 0xFF	; 255
 7c0:	1f 4f       	sbci	r17, 0xFF	; 255
        }
    }
}

void Show_Char ( uint16_t x, uint16_t y, char value ) {
    Show_Font57 ( x, y, value );
 7c2:	b7 01       	movw	r22, r14
 7c4:	ce 01       	movw	r24, r28
 7c6:	92 df       	rcall	.-220    	; 0x6ec <Show_Font57>
    int index = 0;

    // loop through value until we get a NULL (c has NULL terminated strings)
    while ( value[index] != 0 ) {
        Show_Char ( x, y, value[index] );
        x += characterWidth;
 7c8:	26 96       	adiw	r28, 0x06	; 6
    const uint16_t characterWidth = 6;

    int index = 0;

    // loop through value until we get a NULL (c has NULL terminated strings)
    while ( value[index] != 0 ) {
 7ca:	f8 01       	movw	r30, r16
 7cc:	41 91       	ld	r20, Z+
 7ce:	8f 01       	movw	r16, r30
 7d0:	41 11       	cpse	r20, r1
 7d2:	f7 cf       	rjmp	.-18     	; 0x7c2 <Show_String+0x1e>
        Show_Char ( x, y, value[index] );
        x += characterWidth;
        index++;
    }
 7d4:	df 91       	pop	r29
 7d6:	cf 91       	pop	r28
 7d8:	1f 91       	pop	r17
 7da:	0f 91       	pop	r16
 7dc:	ff 90       	pop	r15
 7de:	ef 90       	pop	r14
 7e0:	08 95       	ret

000007e2 <spi_init>:
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//  SPI Functions
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
void spi_init(void)
{
	SPCR = (SPI_INTERRUPT<<SPIE)
 7e2:	80 e5       	ldi	r24, 0x50	; 80
 7e4:	8c bd       	out	0x2c, r24	; 44
		|(SPI_CLK_POLARITY<<CPOL)
		|(SPI_CLK_PHASE<<CPHA)
		|(SPI_CLK_RATE0<<SPR0)
		|(SPI_CLK_RATE1<<SPR1);
	//set interrupt, enable SPI, MSB mode, set as master, low is idle, read on leading edge, Set to speed(fosc/4) SPR0=1, SPR1=0
	SPSR = (DBL_CLK<<SPI2X);	//set whether we want 2x speed or not (1=2x speed).
 7e6:	1d bc       	out	0x2d, r1	; 45
	SPDR = 0x00;		//ensure data register has nothing in it
 7e8:	1e bc       	out	0x2e, r1	; 46
 7ea:	08 95       	ret

000007ec <spi_send_byte>:
//shifts out 8 bits of data
//  uint8_t data - the data to be shifted out
//  returns uint8_t - the data received during sending
uint8_t spi_send_byte(uint8_t data) {
	/* Start transmission */ // Transmission is started by writing data to the transmission register
	SPDR = data;
 7ec:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
 7ee:	0d b4       	in	r0, 0x2d	; 45
 7f0:	07 fe       	sbrs	r0, 7
 7f2:	fd cf       	rjmp	.-6      	; 0x7ee <spi_send_byte+0x2>
	/* Return any data that was shifted into this register upon transmission  */
	return SPDR;
 7f4:	8e b5       	in	r24, 0x2e	; 46
}
 7f6:	08 95       	ret

000007f8 <_exit>:
 7f8:	f8 94       	cli

000007fa <__stop_program>:
 7fa:	ff cf       	rjmp	.-2      	; 0x7fa <__stop_program>
